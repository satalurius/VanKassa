<MudGrid Justify="Justify.Center">
    <MudAvatar xs="6"
               Image="@Image"
               Style="width: 215px; height: 215px; font-size: 2rem;"/>
    <MudPaper xs="6"
              Elevation="0"
              Class="d-flex flex-column justify-center ms-10">
        <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg, .png" Context="files_upload_context" FilesChanged="AddImage">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Image"
                           Size="Size.Medium"
                           for="@files_upload_context">
                    Загрузить фотографию
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>

        @if (imageFiles.Any())
        {
            <MudList>
                @foreach (var file in imageFiles)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name
                    </MudListItem>
                }
            </MudList>
        }

        <MudButton Variant="Variant.Filled"
                   Color="Color.Error"
                   StartIcon="@Icons.Material.Filled.Delete"
                   Size="Size.Medium"
                   Class="mt-2">
            Удалить фотографию
        </MudButton>
    </MudPaper>

</MudGrid>

@code {

    [Parameter]
    public string Image { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private readonly IList<IBrowserFile> imageFiles = new List<IBrowserFile>();

    [Parameter]
    public IBrowserFile? AddedImage { get; set; }

    [Parameter]
    public EventCallback<IBrowserFile> AddedImageChanged { get; set; }

    private void AddImage(IBrowserFile image)
    {
        if (imageFiles.Any())
        {
            imageFiles.Clear();
        }

        imageFiles.Add(image);

        AddedImageChanged.InvokeAsync(image);
    }

}